<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"></pre>
<h1>First</h1>
<p><br/><br/><span>Stage1'job:coppeliasim模擬,繪圖</span></p>
<p><span>Stage2'job:機械手臂程式編寫與模擬</span></p>
<p>stage3<span>'job</span>:延續stage2<span>機械手臂程式編寫與模擬與改善</span></p>
<h1>About</h1>
<p>This is <a href="https://github.com/mdecourse/cmstemplate">https://github.com/mdecourse/cmstemplate</a></p>
<p>目前的 cmsimde 在編輯器下方新增一個 csave 按鈕, 意即 collabrative save, 當動態網際管理系統在多人同時維護登入維護網頁內容時, 編輯各頁面時段, 該頁面可能已經改版, 因此使用 csave 按鈕存檔時, 會導入當下最新的該頁面內容, 並試圖與編輯中的頁面內容進行合併.</p>
<p>使用 csave 按鈕存檔無法刪除頁面資料.</p>
<p>使用 Edit All 模式, 無法使用 csave 按鈕（尚未測試).</p>
<p></p>
<p></p>
<h1>stage1</h1>
<h2>w1</h2>
<h3>建立網頁</h3>
<p>一開始先點選框起來的再建立倉儲 名稱為cd2021</p>
<p><img alt="" height="217" src="/images/cd1.png" width="436"/></p>
<p>隨身系統輸入 git clone --recurse-submodules <a href="https://github.com/40823136/cd2021.git">https://github.com/40823136/cd2021.git</a></p>
<p></p>
<p>再來輸入指令進入網頁</p>
<p><img alt="" height="215" src="/images/cd2.png" width="409"/></p>
<p><img alt="" height="203" src="/images/cd3.png" width="408"/></p>
<p></p>
<p></p>
<p></p>
<h3>編輯leo</h3>
<p><img alt="" height="203" src="/images/cd4.png" width="409"/></p>
<p><img alt="" height="229" src="/images/cd5.png" width="407"/></p>
<p><img alt="" height="220" src="/images/cd6.png" width="404"/></p>
<p><img alt="" height="293" src="/images/cd7.png" width="405"/></p>
<h2>w2</h2>
<h3>討論與影片</h3>
<p></p>
<p>我們這禮拜和隊友討論出來的主題是投石機,我們已經把它大部分畫完,再來要丟進CoppeliaSim模擬看哪裡要改善</p>
<p></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/RjVcg4wXsw0" width="560"></iframe></p>
<h3>圖檔</h3>
<p>組合圖</p>
<p><img alt="" height="188" src="/images/組合.png" width="394"/></p>
<p></p>
<p><img alt="" height="188" src="/images/主體.png" width="394"/></p>
<p><img alt="" height="188" src="/images/湯尺.png" width="394"/></p>
<p><img alt="" height="188" src="/images/輪胎.png" width="394"/></p>
<p><img alt="" height="188" src="/images/軸.png" width="394"/></p>
<p></p>
<p></p>
<h2>w3</h2>
<h3>投石機(1)</h3>
<p>Coppeliasim:<a href="https://drive.google.com/drive/u/0/folders/1OYVbl3cYj_-fkuaArtclJRiNoodQHk7H">https://drive.google.com/drive/u/0/folders/1OYVbl3cYj_-fkuaArtclJRiNoodQHk7H</a></p>
<p>stl檔:<a href="https://drive.google.com/drive/u/0/folders/1bNWk8o1UbAUWI554ASf9u7DNvenfFGik">https://drive.google.com/drive/u/0/folders/1bNWk8o1UbAUWI554ASf9u7DNvenfFGik</a></p>
<p>我們一開始測試發現輪軸會偏移於是我與隊友討論改成不同軸心</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/UNmER-RUnDk" width="560"></iframe></p>
<p></p>
<h3>投石機(2)</h3>
<p>coppeliasim<a href="https://drive.google.com/drive/u/0/folders/1tQ1fepp6NYhcuLg2EIWkgQzCTdnu9Q3l"><span>:h</span>ttps://drive.google.com/drive/u/0/folders/1tQ1fepp6NYhcuLg2EIWkgQzCTdnu9Q3l</a></p>
<p><span>stl檔:<a href="https://drive.google.com/drive/u/0/folders/1bNWk8o1UbAUWI554ASf9u7DNvenfFGik">https://drive.google.com/drive/u/0/folders/1bNWk8o1UbAUWI554ASf9u7DNvenfFGik</a></span></p>
<p><span>投石車前進時車子會往前傾,後來發現是我輪組沒配重,於是我在做改善</span></p>
<p><span></span></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/-oP7XRFrqdI" width="560"></iframe></p>
<h3>投石機(3)</h3>
<p><span>coppeliasim<a href="https://drive.google.com/drive/u/0/folders/17eKw34ROoKfTKXxOr3wvg4RZmva3M1wH">https://drive.google.com/drive/u/0/folders/17eKw34ROoKfTKXxOr3wvg4RZmva3M1wH</a></span></p>
<p>stl檔:<a href="https://drive.google.com/drive/u/0/folders/1LEC6oQ8GNH74uakIbjCPXtFzB-8zmvcE">https://drive.google.com/drive/u/0/folders/1LEC6oQ8GNH74uakIbjCPXtFzB-8zmvcE</a></p>
<p></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/snKEWHJCqYo" width="560"></iframe></p>
<h1>stage2</h1>
<h2>w5</h2>
<h3>stage2組員</h3>
<p><span> </span><a href="http://github.com/40823116/cd2021">40823116 repo</a><span><span> </span><span> </span></span><a href="http://40823116.github.io/cd2021">40823116 site</a></p>
<p><span><span> </span></span><a href="http://github.com/40823123/cd2021">40823123 repo</a><span><span> </span><span> </span></span><a href="http://40823123.github.io/cd2021">40823123 site</a></p>
<p><span><span> </span></span><a href="http://github.com/40823131/cd2021">40823131 repo</a><span><span> </span><span> </span></span><a href="http://40823131.github.io/cd2021">40823131 site</a></p>
<p><span><span> </span></span><a href="http://github.com/40823136/cd2021">40823136 repo</a><span><span> </span><span> </span></span><a href="http://40823136.github.io/cd2021">40823136 site</a></p>
<p></p>
<h2>w6</h2>
<h3>heroku</h3>
<p><span>從 </span><a href="http://a.kmol.info:88/heroku.7z">http://a.kmol.info:88/heroku.7z</a>下載檔案解壓縮到Y槽</p>
<p><img alt="" height="232" src="/images/STAGE1.png" width="321"/></p>
<p>修改start.bat路徑</p>
<p><img alt="" height="261" src="/images/STAGE2.png" width="246"/></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">登入 Heroku, 完成後產生 y:\home_ipv4\_netrc
heroku login -i
設為此倉儲的 remote 同步倉儲, 且在倉儲中會自建名稱為 heroku 的 remoate site.
heroku git:remote -a 40823136</pre>
<p><img alt="" height="174" src="/images/stage3.png" width="324"/></p>
<p><img alt="" height="169" src="/images/stage4.png" width="322"/></p>
<h3>選訂題目</h3>
<p><span>在討論後，決定以自動化生產線做為主軸進行延伸，將利用coppeliasim中所配有的模組進行程式編寫，再加入另外繪製無人車來運輸物件，來完成此專案,而我在此專案負責機械手臂程式編寫、<span>coppeliasim模擬調整</span></span></p>
<p></p>
<h2>w7</h2>
<h3>自動化生產線(1)-用程式控制機械手臂與調整</h3>
<p>我一開始用機械手臂夾取時發現有2個問題</p>
<p>1.機械手臂速率太慢,導致物品與物品中間距離太大,所以決定在第二版本加裝第二個手臂</p>
<p>2.後方因為要止住物品掉落,要加sensor,可是我加上去傳輸帶就不會動,於是決定加物件把它擋住,再用機械手臂夾取</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/J7BdaZIyUug" title="YouTube video player" width="560"></iframe></p>
<p></p>
<h2>w8</h2>
<h3>自動化生產線(2)</h3>
<p>所以我們用兩個機械手臂在前端夾取然後後端再用機械手臂夾到運輸車上,而我們遇到的問題 是夾物品到車上要使車子驅動,而我們運輸車要將進行程式編寫，而程式寫完丟進去無法做動,需要再想辦法解決</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/EBQEXWG6BVY" title="YouTube video player" width="560"></iframe></p>
<h2>w9</h2>
<h3>自動化生產線(3)最終版</h3>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/kSmxRcGlpQo" title="YouTube video player" width="560"></iframe></p>
<h1>stage3</h1>
<h2>w10</h2>
<h3>task1</h3>
<p>參考 <a href="https://40823131.github.io/cd2021">40823131</a>網站</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># open file, default is read mode, since txt content no chinese char
# no encoding = "UTF-8" is needed
with open("stage3_2a.txt") as ab: 
    #先將我們存起來stage3_2a.txt打開並命名為ab
    data = ab.readlines()
    #將stage3_2a.txt的資料讀取檔案中的所有內容 (存成串列形式)
    data = [a.replace('4823122','40823122') for a in data]
    #因為有一組學號寫錯所以用 replace 把舊的字串替換成新的字串 
    data = [b.replace('\t\t','') for b in data]
      #因為有一組少2個人,所以用水平跳格來消除空格
     #print(data)
#print(len(data))
for i in range(len(data)):
    #設一個範圍len(data)=6,變數為i,從0加到5,每次加1 [0,1,2,3,4,5]
    group = data[i].rstrip("\n").split("\t") 
    #先取出data list中的第i項,消除元素中/n ,再找出新的元素
    print('&lt;p&gt;'+group[0]+' | &lt;a href="https://'+group[1]+'.github.io/stage3-ag'+group[0][9]+'"&gt;Website&lt;/a&gt; | &lt;a href="https://github.com/'+group[2]+'/stage3-ag'+group[0][9]+'"&gt;Repository&lt;/a&gt;&lt;/p&gt;')
    #將 group list(串列)中的元素,將網站跟倉儲依序印出來 
    for j in range(2,18,2):
        #設一個範圍,(2到18,每次加2,但不能大於18)
        try:
            print('&lt;p&gt;'+group[j]+' | Website:'+'&lt;a href="https://'+group[j]+'.github.io/cd2021'+'"&gt;'+group[j]+'&lt;/a&gt;'+' | Repository:'+'&lt;a href="https://github.com/'+group[j]+'/cd2021'+'"&gt;'+group[j]+'&lt;/a&gt; &lt;/p&gt;')
          #將 group list(串列)中的元素,將網站跟倉儲依序印出來   
        except:
          continue
           #這邊使用try.....except,因為有一組6個人,如果沒用會失敗,最後用continue是要讓迴圈繼續跑</pre>
<p>stage3_ag1 | <a href="https://40823131.github.io/stage3-ag1">Website</a> | <a href="https://github.com/40823131/stage3-ag1">Repository</a></p>
<p>40823131 | Website:<a href="https://40823131.github.io/cd2021">40823131</a> | Repository:<a href="https://github.com/40823131/cd2021">40823131</a></p>
<p>a40823112 | Website:<a href="https://a40823112.github.io/cd2021">a40823112</a> | Repository:<a href="https://github.com/a40823112/cd2021">a40823112</a></p>
<p>40823123 | Website:<a href="https://40823123.github.io/cd2021">40823123</a> | Repository:<a href="https://github.com/40823123/cd2021">40823123</a></p>
<p>40823145 | Website:<a href="https://40823145.github.io/cd2021">40823145</a> | Repository:<a href="https://github.com/40823145/cd2021">40823145</a></p>
<p>40823136 | Website:<a href="https://40823136.github.io/cd2021">40823136</a> | Repository:<a href="https://github.com/40823136/cd2021">40823136</a></p>
<p>40823109 | Website:<a href="https://40823109.github.io/cd2021">40823109</a> | Repository:<a href="https://github.com/40823109/cd2021">40823109</a></p>
<p>40823116 | Website:<a href="https://40823116.github.io/cd2021">40823116</a> | Repository:<a href="https://github.com/40823116/cd2021">40823116</a></p>
<p>40823108 | Website:<a href="https://40823108.github.io/cd2021">40823108</a> | Repository:<a href="https://github.com/40823108/cd2021">40823108</a></p>
<p>stage3_ag2 | <a href="https://40823151.github.io/stage3-ag2">Website</a> | <a href="https://github.com/40823151/stage3-ag2">Repository</a></p>
<p>40823151 | Website:<a href="https://40823151.github.io/cd2021">40823151</a> | Repository:<a href="https://github.com/40823151/cd2021">40823151</a></p>
<p>40623121 | Website:<a href="https://40623121.github.io/cd2021">40623121</a> | Repository:<a href="https://github.com/40623121/cd2021">40623121</a></p>
<p>40871106 | Website:<a href="https://40871106.github.io/cd2021">40871106</a> | Repository:<a href="https://github.com/40871106/cd2021">40871106</a></p>
<p>40823102 | Website:<a href="https://40823102.github.io/cd2021">40823102</a> | Repository:<a href="https://github.com/40823102/cd2021">40823102</a></p>
<p>40823104 | Website:<a href="https://40823104.github.io/cd2021">40823104</a> | Repository:<a href="https://github.com/40823104/cd2021">40823104</a></p>
<p>40823106 | Website:<a href="https://40823106.github.io/cd2021">40823106</a> | Repository:<a href="https://github.com/40823106/cd2021">40823106</a></p>
<p>40823101 | Website:<a href="https://40823101.github.io/cd2021">40823101</a> | Repository:<a href="https://github.com/40823101/cd2021">40823101</a></p>
<p>40823132 | Website:<a href="https://40823132.github.io/cd2021">40823132</a> | Repository:<a href="https://github.com/40823132/cd2021">40823132</a></p>
<p>stage3_ag3 | <a href="https://40823119.github.io/stage3-ag3">Website</a> | <a href="https://github.com/40823119/stage3-ag3">Repository</a></p>
<p>40823119 | Website:<a href="https://40823119.github.io/cd2021">40823119</a> | Repository:<a href="https://github.com/40823119/cd2021">40823119</a></p>
<p>40823150 | Website:<a href="https://40823150.github.io/cd2021">40823150</a> | Repository:<a href="https://github.com/40823150/cd2021">40823150</a></p>
<p>40823103 | Website:<a href="https://40823103.github.io/cd2021">40823103</a> | Repository:<a href="https://github.com/40823103/cd2021">40823103</a></p>
<p>40823107 | Website:<a href="https://40823107.github.io/cd2021">40823107</a> | Repository:<a href="https://github.com/40823107/cd2021">40823107</a></p>
<p>40523252 | Website:<a href="https://40523252.github.io/cd2021">40523252</a> | Repository:<a href="https://github.com/40523252/cd2021">40523252</a></p>
<p>40823154 | Website:<a href="https://40823154.github.io/cd2021">40823154</a> | Repository:<a href="https://github.com/40823154/cd2021">40823154</a></p>
<p>stage3_ag4 | <a href="https://40823142.github.io/stage3-ag4">Website</a> | <a href="https://github.com/40823142/stage3-ag4">Repository</a></p>
<p>40823142 | Website:<a href="https://40823142.github.io/cd2021">40823142</a> | Repository:<a href="https://github.com/40823142/cd2021">40823142</a></p>
<p>40823144 | Website:<a href="https://40823144.github.io/cd2021">40823144</a> | Repository:<a href="https://github.com/40823144/cd2021">40823144</a></p>
<p>40823127 | Website:<a href="https://40823127.github.io/cd2021">40823127</a> | Repository:<a href="https://github.com/40823127/cd2021">40823127</a></p>
<p>40823148 | Website:<a href="https://40823148.github.io/cd2021">40823148</a> | Repository:<a href="https://github.com/40823148/cd2021">40823148</a></p>
<p>40823121 | Website:<a href="https://40823121.github.io/cd2021">40823121</a> | Repository:<a href="https://github.com/40823121/cd2021">40823121</a></p>
<p>40823135 | Website:<a href="https://40823135.github.io/cd2021">40823135</a> | Repository:<a href="https://github.com/40823135/cd2021">40823135</a></p>
<p>40823114 | Website:<a href="https://40823114.github.io/cd2021">40823114</a> | Repository:<a href="https://github.com/40823114/cd2021">40823114</a></p>
<p>40823146 | Website:<a href="https://40823146.github.io/cd2021">40823146</a> | Repository:<a href="https://github.com/40823146/cd2021">40823146</a></p>
<p>stage3_ag5 | <a href="https://40823111.github.io/stage3-ag5">Website</a> | <a href="https://github.com/40823111/stage3-ag5">Repository</a></p>
<p>40823111 | Website:<a href="https://40823111.github.io/cd2021">40823111</a> | Repository:<a href="https://github.com/40823111/cd2021">40823111</a></p>
<p>40823115 | Website:<a href="https://40823115.github.io/cd2021">40823115</a> | Repository:<a href="https://github.com/40823115/cd2021">40823115</a></p>
<p>40823128 | Website:<a href="https://40823128.github.io/cd2021">40823128</a> | Repository:<a href="https://github.com/40823128/cd2021">40823128</a></p>
<p>40823120 | Website:<a href="https://40823120.github.io/cd2021">40823120</a> | Repository:<a href="https://github.com/40823120/cd2021">40823120</a></p>
<p>40823140 | Website:<a href="https://40823140.github.io/cd2021">40823140</a> | Repository:<a href="https://github.com/40823140/cd2021">40823140</a></p>
<p>40823124 | Website:<a href="https://40823124.github.io/cd2021">40823124</a> | Repository:<a href="https://github.com/40823124/cd2021">40823124</a></p>
<p>40823139 | Website:<a href="https://40823139.github.io/cd2021">40823139</a> | Repository:<a href="https://github.com/40823139/cd2021">40823139</a></p>
<p>40823126 | Website:<a href="https://40823126.github.io/cd2021">40823126</a> | Repository:<a href="https://github.com/40823126/cd2021">40823126</a></p>
<p>stage3_ag6 | <a href="https://40823152.github.io/stage3-ag6">Website</a> | <a href="https://github.com/40823152/stage3-ag6">Repository</a></p>
<p>40823152 | Website:<a href="https://40823152.github.io/cd2021">40823152</a> | Repository:<a href="https://github.com/40823152/cd2021">40823152</a></p>
<p>40823110 | Website:<a href="https://40823110.github.io/cd2021">40823110</a> | Repository:<a href="https://github.com/40823110/cd2021">40823110</a></p>
<p>40823122 | Website:<a href="https://40823122.github.io/cd2021">40823122</a> | Repository:<a href="https://github.com/40823122/cd2021">40823122</a></p>
<p>40823125 | Website:<a href="https://40823125.github.io/cd2021">40823125</a> | Repository:<a href="https://github.com/40823125/cd2021">40823125</a></p>
<p>40823117 | Website:<a href="https://40823117.github.io/cd2021">40823117</a> | Repository:<a href="https://github.com/40823117/cd2021">40823117</a></p>
<p>40823129 | Website:<a href="https://40823129.github.io/cd2021">40823129</a> | Repository:<a href="https://github.com/40823129/cd2021">40823129</a></p>
<p>40823149 | Website:<a href="https://40823149.github.io/cd2021">40823149</a> | Repository:<a href="https://github.com/40823149/cd2021">40823149</a></p>
<p>40823153 | Website:<a href="https://40823153.github.io/cd2021">40823153</a> | Repository:<a href="https://github.com/40823153/cd2021">40823153</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"></pre>
<p></p>
<h3>task2-1</h3>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/cvEFvUINdog" title="YouTube video player" width="560"></iframe></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import sim as vrep
import sys
# child threaded script: 
#simExtRemoteApiStart(19999)
 
vrep.simxFinish(-1)
 
clientID = vrep.simxStart('127.0.0.1', 19999, True, True, 5000, 5)
 
if clientID!= -1:
    print("Connected to remote server")
else:
    print('Connection not successful')
    sys.exit('Could not connect')
 
errorCode, handle1=vrep.simxGetObjectHandle(clientID,'cd1',vrep.simx_opmode_oneshot_wait)
error_Code,handle2=vrep.simxGetObjectHandle(clientID,'cd2',vrep.simx_opmode_oneshot_wait) 
errorCode,handle3=vrep.simxGetObjectHandle(clientID,'cd3',vrep.simx_opmode_oneshot_wait)
errorCode,handle4=vrep .simxGetObjectHandle(clientID,'cd4',vrep.simx_opmode_oneshot_wait)
errorCode,handle5=vrep.simxGetObjectHandle(clientID,'cd5',vrep.simx_opmode_oneshot_wait)

if errorCode == -1:
    print('Can not find left or right motor')
    sys.exit()
 
errorCode=vrep.simxSetJointTargetVelocity(clientID,handle1,1, vrep.simx_opmode_oneshot_wait)
errorCode=vrep.simxSetJointTargetVelocity(clientID,handle2,0, vrep.simx_opmode_oneshot_wait)
errorCode=vrep.simxSetJointTargetVelocity(clientID,handle3,1, vrep.simx_opmode_oneshot_wait)
errorCode=vrep.simxSetJointTargetVelocity(clientID,handle4,0, vrep.simx_opmode_oneshot_wait)
errorCode=vrep.simxSetJointTargetVelocity(clientID,handle5,0.02, vrep.simx_opmode_oneshot_wait)</pre>
<h3>task2-2-python Remote API程式控制機械手臂</h3>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/c5KH8LNhzJQ" title="YouTube video player" width="560"></iframe></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import sim as vrep
import sys
import math
# child threaded script: 
#simExtRemoteApiStart(19999)
 
vrep.simxFinish(-1)
 
clientID = vrep.simxStart('127.0.0.1', 19999, True, True, 5000, 5)
 
if clientID!= -1:
    print("Connected to remote server")
else:
    print('Connection not successful')
    sys.exit('Could not connect')
    

 
vrep.simxStartSimulation(clientID, vrep.simx_opmode_oneshot)
 
RC1,handle1 = vrep.simxGetObjectHandle(clientID, 'motor1', vrep.simx_opmode_blocking)
RC2,handle2 = vrep.simxGetObjectHandle(clientID, 'motor2', vrep.simx_opmode_blocking)
RC3,handle3 = vrep.simxGetObjectHandle(clientID, 'motor3', vrep.simx_opmode_blocking)
RC4,handle4 = vrep.simxGetObjectHandle(clientID, 'motor4', vrep.simx_opmode_blocking)
 
vrep.simxSetJointTargetPosition(clientID,handle1,0*math.pi/180,vrep.simx_opmode_oneshot_wait)
vrep.simxSetJointTargetPosition(clientID,handle2,30*math.pi/180,vrep.simx_opmode_oneshot_wait)
vrep.simxSetJointTargetPosition(clientID,handle3,0*math.pi/180,vrep.simx_opmode_oneshot_wait)
vrep.simxSetJointTargetPosition(clientID,handle4,90*math.pi/180,vrep.simx_opmode_oneshot_wait)</pre>
<p>目前還出現一個問題,motor2還無法順利作動還在找哪裡錯誤</p>
<h3>task2-3</h3>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/fV1A4K2T6lM" title="YouTube video player" width="560"></iframe></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import sim as vrep
import sys
# child threaded script: 
#simExtRemoteApiStart(19999)
 
vrep.simxFinish(-1)
 
clientID = vrep.simxStart('127.0.0.1', 19999, True, True, 5000, 5)
 
if clientID!= -1:
    print("Connected to remote server")
else:
    print('Connection not successful')
    sys.exit('Could not connect')
 
errorCode,left_motor_handle=vrep.simxGetObjectHandle(clientID,'bubbleRob_leftMotor',vrep.simx_opmode_oneshot_wait)
 
errorCode,right_motor_handle=vrep.simxGetObjectHandle(clientID,'bubbleRob_rightMotor',vrep.simx_opmode_oneshot_wait)
 
if errorCode == -1:
    print('Can not find left or right motor')
    sys.exit()
 
errorCode=vrep.simxSetJointTargetVelocity(clientID,left_motor_handle,0, vrep.simx_opmode_oneshot_wait)
errorCode=vrep.simxSetJointTargetVelocity(clientID,right_motor_handle,-2, vrep.simx_opmode_oneshot_wait)
</pre>
<p><br/><br/></p>
<h2>w13</h2>
<h3>第一組線上直播</h3>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/a8Uw1WOhCYk" title="YouTube video player" width="560"></iframe></p>
<h3>RoboDK</h3>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/7avRhs5OLoU" title="YouTube video player" width="560"></iframe></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from robolink import *    # API to communicate with robodk
from robodk import *      # robodk robotics toolbox
 
# Setup global parameters
BALL_DIAMETER = 100 # diameter of one ball
APPROACH = 100      # approach distance to grab each part, in mm
nTCPs = 6           # number of TCP's in the tool
 
#----------------------------------------------
# Function definitions
 
def box_calc(BALLS_SIDE=4, BALLS_MAX=None):
    """Calculate a list of points (ball center) as if the balls were stored in a box"""
    if BALLS_MAX is None: BALLS_MAX = BALLS_SIDE**3
    xyz_list = []
    for h in range(BALLS_SIDE):
        for i in range(BALLS_SIDE):
            for j in range(BALLS_SIDE):
                xyz_list = xyz_list + [[(i+0.5)*BALL_DIAMETER, (j+0.5)*BALL_DIAMETER, (h+0.5)*BALL_DIAMETER]]
                if len(xyz_list) &gt;= BALLS_MAX:
                    return xyz_list
    return xyz_list
 
def pyramid_calc(BALLS_SIDE=4):
    """Calculate a list of points (ball center) as if the balls were place in a pyramid"""
    #the number of balls can be calculated as: int(BALLS_SIDE*(BALLS_SIDE+1)*(2*BALLS_SIDE+1)/6)
    BALL_DIAMETER = 100
    xyz_list = []
    sqrt2 = 2**(0.5)
    for h in range(BALLS_SIDE):
        for i in range(BALLS_SIDE-h):
            for j in range(BALLS_SIDE-h):
                height = h*BALL_DIAMETER/sqrt2 + BALL_DIAMETER/2
                xyz_list = xyz_list + [[i*BALL_DIAMETER + (h+1)*BALL_DIAMETER*0.5, j*BALL_DIAMETER + (h+1)*BALL_DIAMETER*0.5, height]]
    return xyz_list
 
def balls_setup(frame, positions):
    """Place a list of balls in a reference frame. The reference object (ball) must have been previously copied to the clipboard."""
    nballs = len(positions)
    step = 1.0/(nballs - 1)
    for i in range(nballs):
        newball = frame.Paste()
        newball.setName('ball ' + str(i)) #set item name
        newball.setPose(transl(positions[i])) #set item position with respect to parent
        newball.setVisible(True, False) #make item visible but hide the reference frame
        newball.Recolor([1-step*i, step*i, 0.2, 1]) #set RGBA color
 
def cleanup_balls(parentnodes):
    """Delete all child items whose name starts with \"ball\", from the provided list of parent items."""
    todelete = []
    for item in parentnodes:
        todelete = todelete + item.Childs()
 
    for item in todelete:
        if item.Name().startswith('ball'):
            item.Delete()
 
def TCP_On(toolitem, tcp_id):
    """Attach the closest object to the toolitem Htool pose,
    furthermore, it will output appropriate function calls on the generated robot program (call to TCP_On)"""
    toolitem.AttachClosest()
    toolitem.RDK().RunMessage('Set air valve %i on' % (tcp_id+1))
    toolitem.RDK().RunProgram('TCP_On(%i)' % (tcp_id+1));
         
def TCP_Off(toolitem, tcp_id, itemleave=0):
    """Detaches the closest object attached to the toolitem Htool pose,
    furthermore, it will output appropriate function calls on the generated robot program (call to TCP_Off)"""
    toolitem.DetachAll(itemleave)
    toolitem.RDK().RunMessage('Set air valve %i off' % (tcp_id+1))
    toolitem.RDK().RunProgram('TCP_Off(%i)' % (tcp_id+1));
 
 
#----------------------------------------------------------
# The program starts here:
 
# Any interaction with RoboDK must be done through RDK:
RDK = Robolink()
 
# Turn off automatic rendering (faster)
RDK.Render(False)
 
#RDK.Set_Simulation_Speed(500); # set the simulation speed
 
# Gather required items from the station tree
robot = RDK.Item('Fanuc M-710iC/50')
robot_tools = robot.Childs()
#robottool = RDK.Item('MainTool')
frame1 = RDK.Item('Table 1')
frame2 = RDK.Item('Table 2')
 
# Copy a ball as an object (same as CTRL+C)
ballref = RDK.Item('reference ball')
ballref.Copy()
 
# Run a pre-defined station program (in RoboDK) to replace the two tables
prog_reset = RDK.Item('Replace objects')
prog_reset.RunProgram()
 
# Call custom procedure to remove old objects
cleanup_balls([frame1, frame2])
 
# Make a list of positions to place the objects
frame1_list = pyramid_calc(4)
frame2_list = pyramid_calc(4)
 
# Programmatically place the objects with a custom-made procedure
balls_setup(frame1, frame1_list)
 
# Delete previously generated tools
for tool in robot_tools:
    if tool.Name().startswith('TCP'):
        tool.Delete()
         
# Calculate tool frames for the suction cup tool of 6 suction cups
TCP_list = []
for i in range(nTCPs):
    TCPi_pose = transl(0,0,100)*rotz((360/nTCPs)*i*pi/180)*transl(125,0,0)*roty(pi/2)
    TCPi = robot.AddTool(TCPi_pose, 'TCP %i' % (i+1))
    TCP_list.append(TCPi)
 
TCP_0 = TCP_list[0]
 
# Turn on automatic rendering
RDK.Render(True)
 
# Move balls    
robot.setPoseTool(TCP_list[0])
nballs_frame1 = len(frame1_list)
nballs_frame2 = len(frame2_list)
idTake = nballs_frame1 - 1
idLeave = 0
idTCP = 0
target_app_frame = transl(2*BALL_DIAMETER, 2*BALL_DIAMETER, 4*BALL_DIAMETER)*roty(pi)*transl(0,0,-APPROACH)
 
while idTake &gt;= 0:
    # ------------------------------------------------------------------
    # first priority: grab as many balls as possible
    # the tool is empty at this point, so take as many balls as possible (up to a maximum of 6 -&gt; nTCPs)
    ntake = min(nTCPs, idTake + 1)
 
    # approach to frame 1
    robot.setPoseFrame(frame1)
    robot.setPoseTool(TCP_0)
    robot.MoveJ([0,0,0,0,10,-200])
    robot.MoveJ(target_app_frame)
 
    # grab ntake balls from frame 1
    for i in range(ntake):
        TCPi = TCP_list[i]
        robot.setPoseTool(TCPi)
        # calculate target wrt frame1: rotation about Y is needed since Z and X axis are inverted
        target = transl(frame1_list[idTake])*roty(pi)*rotx(30*pi/180)
        target_app = target*transl(0,0,-APPROACH)
        idTake = idTake - 1       
        robot.MoveL(target_app)
        robot.MoveL(target)
        TCP_On(TCPi, i)
        robot.MoveL(target_app)
  
    # ------------------------------------------------------------------
    # second priority: unload the tool     
    # approach to frame 2 and place the tool balls into table 2
    robot.setPoseTool(TCP_0)
    robot.MoveJ(target_app_frame)
    robot.MoveJ([0,0,0,0,10,-200])
    robot.setPoseFrame(frame2)    
    robot.MoveJ(target_app_frame)
    for i in range(ntake):
        TCPi = TCP_list[i]
        robot.setPoseTool(TCPi)
        if idLeave &gt; nballs_frame2-1:
            raise Exception("No room left to place objects in Table 2")
         
        # calculate target wrt frame1: rotation of 180 about Y is needed since Z and X axis are inverted
        target = transl(frame2_list[idLeave])*roty(pi)*rotx(30*pi/180)
        target_app = target*transl(0,0,-APPROACH)
        idLeave = idLeave + 1       
        robot.MoveL(target_app)
        robot.MoveL(target)
        TCP_Off(TCPi, i, frame2)
        robot.MoveL(target_app)
 
    robot.MoveJ(target_app_frame)
 
# Move home when the robot finishes
robot.MoveJ([0,0,0,0,10,-200])</pre>
<p><br/><br/></p>
<h2>w15</h2>
<h3>Video and subtitle translation-1</h3>
<p><br/><br/><strong>Video:</strong> <iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/IKOGwoJ2HLk" title="YouTube video player" width="560"></iframe> <br/><strong>Subtitle translation:</strong></p>
<p>Title:Inverse kinematics for a 2-joint robot arm using geometry</p>
<p>標題:反向運動學對使用幾何體的2個關節機械臂</p>
<p>We saw this simple two-link robot in the previous lecture about forward kinematics</p>
<p>我們在上一堂關於正向運動學的課程中看到了這個簡單的雙連桿機構</p>
<p><br/>The tooltip pose of this robot is described simply by two numbers, the coordinates x and y with respect to the world coordinate frame.<br/>該機構的姿態由兩個簡單的數字描述，即相對於絕對坐標系的坐標 x 和 y</p>
<p><br/>So,the problem hwre us that given x and y.we want to determine the joined angles,Q1 and q2.<br/>所以，給我們 x 和 y 的問題是我們想要確定連接角 Q1 和 Q2是多少</p>
<p><br/>The solution that we’re going to follow in this particular section is a geometric one.</p>
<p>我們將用一些幾何的技巧來解決這個問題</p>
<p><br/>We’re going to start with a simple piece of construction.<br/>我們將從一個簡單的結構開始</p>
<p><br/>We’re going to overlay the red triangle on top of our robot.<br/>我們將在機構上覆蓋紅色三角形</p>
<p><br/>We know that the end point coordinate is x, y, so the vertical height of the triangle is y, the horizontal width is x<br/>我們知道終點坐標是x，y，所以三角形的垂直高度是y，水平寬度是x</p>
<p><br/>And, using Pythagoras theorem, we can write r squared equals x squared plus y squared.<br/>並且，使用畢氏定理，我們可以寫出 r 平方等於 x 平方加上 y 平方</p>
<p><br/>So far,so easy<br/>到目前為止都很容易</p>
<p><br/>Now, w’re going to look at this triangle highlighted here in red and we want to determine the angle alpha.<br/>現在，我們將查看此處紅色突出顯示的三角形，我們要決定α角</p>
<p><br/>In order to do that, we need to use the cosine rule.<br/>為了做到這一點，我們需要使用餘弦定理</p>
<p><br/>And, if you’re a little rusty on the cosine rule, here is a bit of a refresher.<br/>而且，如果你對餘弦定理有點生疏，這裡有一點複習</p>
<p><br/>We have an arbitrary triangle.<br/>我們這裡有一個任意三角形</p>
<p><br/>We don’t have any right angles in it and we’re going to label the length of this edge as A and the angle opposite that edge, we’re going to label as little a</p>
<p>我們沒有任何直角，我們將這條邊的長度標記為 A，而該邊的對面角，我們將標記為 a</p>
<p><br/>And, we do the same for this edge and this angle, and this edge and this angle,So, all together, the sides are labelled capitals A, B and C, and the angles are labelled little a, little b, and little c<br/>並且，我們對這條邊和這個角做同樣的事情，這條邊和這個角，所以，所有的邊都被標記為大寫的A、B和C，而這些角被標記小寫的a、b和c</p>
<p><br/>So, the cosine rule is simply this relationship here.<br/>所以，餘弦定理就是這種關係<br/>It’s a bit like Pythagoras’ theorem except for this extra term on the end with the cos a in it.<br/>它有點像畢氏定理，除了末尾有 cos a 的這個額外項</p>
<p><br/>Now, let’s apply the cosine rule to the particular triangle we looked at a moment ago<br/>現在，讓我們將餘弦定理應用於我們剛才看到的特定三角形</p>
<p><br/>It’s pretty straightforward to write down this particular relationship.<br/>寫下這種特殊關係非常簡單</p>
<p><br/>We can isolate the term cos alpha which gives us the angle alpha that we’re interested in.<br/>我們可分離出 cosα ，只需要得到我要的α角</p>
<p><br/>And, it’s defined in terms of the constant link lengths, A1 and A2 and the position of the end effector, x and y.<br/>而且，它是根據恆定連桿長度 A1 和 A2 以及末端的位置 x 和 y 去定義</p>
<p><br/>We can write this simple relationship between the angles alpha and Q2<br/>我們可以寫出α角和 Q2 之間的這種簡單關係</p>
<p><br/>And, we know from the shape of the cosine function that cos of q2 must be equal to negative of cos alpha<br/>而且，我們從餘弦函數的形狀知道，q2 的 cos 必須等於 cos α 的負數</p>
<p><br/>This time, let’s just write an expression for the cosine of the joined angle q2<br/>這一次，我們只寫一個關於連接角 q2 的餘弦的表達式</p>
<p><br/>Now, we’re going to draw yet another red triangle and we’re going apply some simple trigonometry here<br/>現在，我們將繪製另一個紅色三角形，並在此處應用一些簡單的三角函數</p>
<p><br/>If we know Q2, then we know this length and this length of the red triangle<br/>如果我們知道 Q2，那麼我們就知道這個長度和這個紅色三角形的長度</p>
<p><br/>We can write this relationship for the sine of the joined angle q2<br/>我們可以為連接角 Q2 的正弦寫出這種關係</p>
<p><br/>Now, we can consider this bigger triangle whose angle is beta and this side length of this triangle is given here in blue<br/>現在，我們可以考慮這個更大的三角形，它的角是β，這個三角形的邊長在這裡用藍色給出</p>
<p><br/>And, the length of the other side of the triangle is this<br/>而且，三角形的另一邊的長度是這個</p>
<p><br/>So, now we can write an expression for the angle beta in terms of these parameters here<br/>所以，現在我們可以在此處根據這些參數編寫角度 beta 的表達式</p>
<p><br/>Going back to the red triangle that we drew earlier, we can establish a relationship between q1 and the angle beta<br/>回到我們之前畫的紅色三角形，我們可以建立 Q1 和角度 beta 之間的關係</p>
<p><br/>Introduce yet another angle, this one gamma and we can write a relationship between the angle gamma and the tooltip coordinates x and y<br/>引入另一個角度，這個ɣ，我們可以寫出角度ɣ和工具提示坐標 x 和 y 之間的關係</p>
<p><br/>Now, we can write a simple relationship between the angles that we’ve constructed, gamma and beta and the joined angle we’re interested in which is q1<br/>現在，我們可以在我們構建的角度 ɣ 和 β與我們感興趣的連接角度 Q1 之間寫出一個簡單的關係</p>
<p><br/>And, the total relationship looks something like this<br/>而且，整個關係看起來像這樣</p>
<p>Quite a complex relationship, it gives us the angle of joined one, that’s q1 in terms of the end effector coordinates y and x, and a bunch of constants, a1 and a2, and it’s also a function of the second joint angle, Q2</p>
<p>一個相當複雜的關係，它給了我們連接的角度，即末端執行器坐標 y 和 x 的 q1，以及一堆常數 a1 和 a2，它也是第二個關節角度 Q2 的函數</p>
<p>So, let’s summarize what it is that we have derived here</p>
<p>所以，總結我們在這裡得出什麼</p>
<p><span>We have an expression for the cosine of Q2 and we have an expression for Q1</span></p>
<p><span>我們有 Q2 的餘弦表達方程式和 Q1 的表達方程式</span></p>
<p><span>Now, the cosine function is symmetrical about 0</span></p>
<p><span><c-wiz class="rm1UF UnxENd dHeVVb" data-node-index="2;0" data-p='%.@."","",""]' jsaction="fgP5ge:reBGj,fO5Jj;SuwQzc:psubsc;ZJRbqd:R99J9b;PPMpVe:Ro8hud;iRXaId:vQ5fhd,QHu6Rd,g1rTCe,hHjFBe;WUl1Sc:Lt1lf;ETwhqd:ohO51;xlKgVc:sz93Ff;auJseb:IV7LWe;pNe98e:B1XqVb;xFfZGc:fO5Jj;OQcvYd:o9EnMb,lXvwxb;sT00Fe:Nrlepe;K1idad:ueU8Ab;MFfQNe:XTf7qb;n3ynxb:tQNmWe;k9TsOe:PCDOwc;RRMwLc:Fg8W1e;mG3QHf:OYLrVb;Qz4V0b:hQ7xdc;fBzasf:YoknPd;UgEtGb:hQ7xdc;h5CHLc:i5R1S; click:gx3W4c; touchend:Ui18c;h1Uxi:qx6Cqc;PF39hf:gx3W4c;HmXuze:peH7Nc;FvQNXc:T2uEDc,J6gWY;zOKmBc:rV2CEd,ZQTNrf;NC92Xd:t0GU7d,UbDGRc;XZiffb:MEUYed,ZcXqnb;" jscontroller="M2suMc" jsdata="deferred-c36" jsmodel="hc6Ubd LP4cEc" jsrenderer="xuEY0" jsshadow=""></c-wiz></span></p>
<div class="FFpbKc" soy-server-key="6:VAzvVd">
<div class="ZTPlmc">現在，餘弦函數在0對稱</div>
<div class="ZTPlmc"></div>
<div class="ZTPlmc">So, if we know the value of the cosine of Q2, then there are two possible solutions a positive angle and a negative angle.</div>
<div class="ZTPlmc">
<p>所以我們知道cos  Q2的值可能為正角和負角。</p>
<p>We’re going to explicitly choose the positive angle. Which means that I can write this expression here.</p>
<p>我們選擇正角，表示我可以寫出此表達式。</p>
<p>And now, we have what we call the inverse kinematic solution for this two-link robot.</p>
<p>現在我們能用逆向運動學來解決雙連桿機構</p>
<p>We have an expression for the two joined angles, Q1 and Q2 in terms of the end effector pose x and y, and a bunch of constants.</p>
<p>我們有兩個角 Q1 和 Q2 的表達式，根據最終執行的x 和 y 以及一系列常數</p>
<p><span>You notice that the two equations are not independent</span></p>
<p><span>你注意到這兩個方程不是獨立的</span></p>
<p><span>The equation for Q1, in fact, depends on the solution for Q2</span></p>
</div>
<div class="ZTPlmc">實際上，Q1 的方程取決於 Q2 的解</div>
<div class="ZTPlmc"></div>
<div class="ZTPlmc"><span>In this case, Q2 is negative and we’re going to write the solution for Q2 with a negative sign in front of the inverse cosine</span></div>
<div class="ZTPlmc"><span>在這種情況下，Q2 是負數，我們將用負號在反餘弦前寫出 Q2 的解</span></div>
<div class="ZTPlmc"><span></span></div>
<div class="ZTPlmc"><span>Now, we need to solve for Q1, so we’re going to introduce this particular red triangle, the angle beta that we solved previously, and the angle gamma which is defined in terms of y and x</span></div>
<div class="ZTPlmc"><span>現在，我們需要求解 Q1，因此我們將介紹這個特定的紅色三角形、我們之前求解的β角，以及根據 y 和 x 定義的ɣ角</span></div>
<div class="ZTPlmc"><span></span></div>
<div class="ZTPlmc"><span>Now, we write a slightly different relationship between q1, gamma and beta, different to what we had before</span></div>
<div class="ZTPlmc"><span>現在，我們在 q1、ɣ 和 β之間寫出略有不同的關係，與我們之前的不同</span></div>
<div class="ZTPlmc"><span></span></div>
<div class="ZTPlmc"><span>There’s a change of sign involved</span></div>
<div class="ZTPlmc"><span>這涉及符號的變化</span></div>
<div class="ZTPlmc"><span></span></div>
<div class="ZTPlmc"><span>Then, we can substitute all that previous equation and come up with this expression for Q1</span></div>
<div class="ZTPlmc"><span>然後，我們可以替換之前的所有等式並得出 Q1 的這個表達式</span></div>
<div class="ZTPlmc">
<p>Again, there is a change of sign here</p>
<p>同樣，這裡的符號發生了變化</p>
<p>Previously, this was a negative sign</p>
<p>先前，這是個負號</p>
<p><span>And, here in summary form is the solution for the inverse kinematics of our two-link robot when it is in this particular configuration, where Q2 is negative</span></p>
<p><span>並且，這裡總結的形式是我們的雙連桿機構在這種特定配置下的逆向運動學的解決方案，其中 Q2 為負</span></p>
<p>Let’s compare the two solutions, the case where q2 is positive and the case where q2 is negative.</p>
<p>讓我們比較兩個解決方案，Q2為正和Q2為負的情況</p>
</div>
<h3>Video and subtitle translation-2</h3>
</div>
<p><span></span></p>
<p><span></span></p>
<p></p>
<p><strong>video:</strong></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/eIZuz1XCd0w" title="YouTube video player" width="560"></iframe></p>
<p><span></span><br/><strong>Subtitle translation:</strong></p>
<p><strong> </strong>title:Inverse kinematics for a 2-joint robot arm using algebra</p>
<p>標題:用逆向運動學對2連桿機構手臂使用代數</p>
<p><span>Here we have the same two link robot as we just looked at but this time we're going tosolve it using an analytical approach , that is we're going to rely much more on algebra ,particular linear algebra rather than geometry</span></p>
<pre class="tw-data-text tw-text-large XcVN5d tw-ta" data-placeholder="翻譯" dir="ltr" id="tw-target-text"><span class="Y2IQFc" lang="zh-TW">在這裡，我們有剛剛看到的相同的兩個連桿機構，但這次我們將使用分析方法來解決它，也就是說，我們將更多地依賴代數，特別是線性代數而不是幾何<br/></span></pre>
<p><span>We have an expression E , which is the homogeneous transformation which represents the pose of the robots endefector and we looked at this in the last lecture , we can write the endefector pose as a sequence of elementary homogeneous transformations</span><br/><strong></strong></p>
<pre class="tw-data-text tw-text-large XcVN5d tw-ta" data-placeholder="翻譯" dir="ltr" id="tw-target-text"><span class="Y2IQFc" lang="zh-TW">我們有一個表達式 E ，它是表示機器人最終位姿的齊次變換，我們在上一課中看過這個，我們可以將最終位姿寫為一系列基本齊次變換</span></pre>
<p><span>A rotation by Q1 , a translation along the X direction by A1 , a rotation by Q2 and then a translation in the X direction by A2</span></p>
<pre class="tw-data-text tw-text-large XcVN5d tw-ta" data-placeholder="翻譯" dir="ltr" id="tw-target-text"><span class="Y2IQFc" lang="zh-TW">Q1 旋轉，A1 沿 X 方向平移，Q2 旋轉，然後 A2 沿 X 方向平移</span></pre>
<p><span>If I expand this out , multiply all the transformations together , I get the expression shown here ; a three by three homogeneous transformation matrix representing the pose of the robot's endefector</span></p>
<pre class="tw-data-text tw-text-large XcVN5d tw-ta" data-placeholder="翻譯" dir="ltr" id="tw-target-text"><span class="Y2IQFc" lang="zh-TW">如果我將其展開，將所有變換相乘，就會得到此處所示的表達式；一個三乘三的齊次變換矩陣，表示機器人的最終的姿態</span></pre>
<p><span>Now for this particular two link robot , we are only interested in the position of its endefector , it's X and Y co - ordinate and they are these two elements within the homogeneous transformation matrix , so I'm going to copy those out </span></p>
<pre class="tw-data-text tw-text-large XcVN5d tw-ta" data-placeholder="翻譯" dir="ltr" id="tw-target-text"><span class="Y2IQFc" lang="zh-TW">現在對於這個特殊的雙連桿機器人，我們只對它的最終的位置感興趣，它是 X 和 Y 坐標，它們是齊次變換矩陣中的這兩個元素，所以我將把它們複製出來</span></pre>
<p>So here again is our expression for X and Y and what we're going to do is a fairly common trick , we're going to square and add these two equations and I get a relationship that looks like this .</p>
<p>所以這裡又是我們對 X 和 Y 的表達式，我們要做的是一個相當常見的技巧，我們要將它平方並將這兩個方程相加，我得到一個看起來像這樣的關係式。</p>
<p>Now I can solve for the joint angle Q2 in terms of the endefector pose X and Y and the robot's constants A1 and A2.</p>
<p>現在我可以根據最終位置X和Y以及機械手臂的常數A1及A2來求出關節角度Q2。</p>
<p>Now what I'm going to do is apply the sum of angles identity .</p>
<p>現在我要做的是應用角度之和的特性</p>
<p>'m going to expand these terms, sine of Q1 plus Q2 or cos of Q1 plus Q2 and to make life a little bit easier, I'm going to make some substations, so where ever I had cos Q2, I'm going to write C2 and where ever I had sine Q2, I'm going to write S2.</p>
<p>我將展開這些項，Q1 的正弦加 Q2 或 Q1 的餘弦加 Q2，為了更輕鬆一點，我將建立一些分部，所以只要有 cos Q2，我會將其取代為C2並且在有正弦Q2的地方，我會將其取代為S2</p>
<p>It's a fairly common shorthand when people are looking at robot kinematic equations</p>
<p>當人們解決機械手臂運動學方程式時，這是一個相當常見的快速記法</p>
<p>And here are the equations after making those substitutions</p>
<p>這是進行替換後的方程式</p>
<p>Looking at these two equations, I can see that they fall into a very well known form and for that form there is a very well known solution.</p>
<p>看看這兩個方程式，我可以看到它們屬於一個眾所周知的形式，對於這種形式，有一個淺顯易見的解決方案</p>
<p><span>So I'm going to consider just one of the equations, the equation for Y and using our well known identity and it's solution, I can determine the values for the variables little a, little b and little c and once l've determined those, then I can just write down the solution for Q1, which x is the equivalent of theta in this particular case</span></p>
<pre class="tw-data-text tw-text-large XcVN5d tw-ta" data-placeholder="翻譯" dir="ltr" id="tw-target-text"><span class="Y2IQFc" lang="zh-TW">所以我將只考慮其中一個方程，Y 的方程，並使用我們眾所周知的恆等式和它的解，我可以確定變量小 a、小 b 和小 c 的值，一旦我確定了這些，然後我可以寫下 Q1 的解決方案，在這種特殊情況下，x 相當於 theta</span></pre>
<p>Here again is our expression for Q1, copied over from the previous slide and we may remember from earlier in our workings that we determined this particular relationship; X squared plus Y squared is equal to this particular complex expression</p>
<p>這裡再次是我們對 Q1 的表達，從上一張幻燈片複製過來，我們可能還記得在我們早期的說明中，確定了這種特殊關係； X 平方加 Y 平方等於這個特定的複雜表達式</p>
<p>So I can substitute that in and do some simplification and I end up with this slightly less complex expression for Q1</p>
<p>因此，我可以將其替換並進行一些簡化，最終得到 Q1 的這個稍微不那麼複雜的表達式</p>
<p>And it is the same expression that I got following the geometric approach in the previous section.</p>
<p>這與我在上一節中遵循幾何方法求出的表達式一模一樣</p>
<h2>w16</h2>
<h3>Onshape 零組件繪製</h3>
<p><a href="https://drive.google.com/drive/u/0/folders/1NXtAQTYh5HnzWEOmiwEsbF6zssey-cr6">Onshape 零組件繪製</a></p>
<p><a href="https://cad.onshape.com/documents/5fd1244dfb634580463242cc/w/fb380d6c9ffc958789022ff8/e/0daedbdc0b7eecf8903870e2">onshape 共享</a></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/nE-DxXxDmDE" title="YouTube video player" width="560"></iframe></p>
<p></p>
<h3>建立 CoppeliaSim 4.1.0 MTB robot 場景</h3>
<p><a href="https://drive.google.com/drive/folders/1_dPIEnjHaaXSAg-GkuxG3Fuyw_24BQBE?usp=sharing">coppliasim檔案</a></p>
<p>手臂旋轉各種角度</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/LIfzGUSu6FM" title="YouTube video player" width="560"></iframe></p>
<p></p>
<p></p>
<h3>手臂末端加入 components-gripper-suction pad 吸盤跟鍵盤控制</h3>
<p>joint1 用r(順時針)跟l(逆時針)來控制讓它轉30度</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"> if (auxiliaryData[1]==108) then
         rotation1 = rotation1 + 30*deg
         sim.setJointPosition(axis1, rotation1)
    end--if r
    if (auxiliaryData[1]==114) then 
        rotation1 = rotation1 - 30*deg
        sim.setJointPosition(axis1, rotation1)
    end --if l</pre>
<p><span>joint2 用1(順時針)跟2(逆時針)來控制讓它轉60度</span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">if (auxiliaryData[1]==49) then
         rotation1 = rotation1 + 60*deg
         sim.setJointPosition(axis2, rotation1)
     end --if 1
     if (auxiliaryData[1]==50) then
         rotation1 = rotation1 - 60*deg
         sim.setJointPosition(axis2, rotation1)
     end -- if  2</pre>
<p><span>joint4     用u(向下0.03吸取)跟d(向上0.03)來控制</span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">if (auxiliaryData[1]==117) then 
                     rotation3 = rotation3 - 0.03 - calibration 
                     sim.setJointPosition(axis4,rotation3)
                end -- if u 
                if (auxiliaryData[1]==100) then
                     rotation3 = rotation3 + 0.03 + calibration
                     sim.setJointPosition(axis4,rotation3)
                end -- if d
                 </pre>
<p><span></span></p>
<p><span><a href="https://drive.google.com/drive/u/0/folders/1_dPIEnjHaaXSAg-GkuxG3Fuyw_24BQBE">suction pad control</a></span></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/aek692UXhQQ" title="YouTube video player" width="560"></iframe></p>
<h3>逆向運動學函式-鍵盤控制與程式迴圈方式</h3>
<p><span>(0.2, 0.7, 0.05)</span></p>
<p><span> </span><img alt="" height="268" src="/images/72214.jpg" width="352"/></p>
<p><span>(-0.3, -0.55, 0.05)</span></p>
<p><img alt="" height="268" src="/images/72215.jpg" width="352"/></p>
<p><strong>鍵盤控制</strong></p>
<p><a href="https://drive.google.com/drive/u/0/folders/1_dPIEnjHaaXSAg-GkuxG3Fuyw_24BQBE">Inverse Kinematics</a></p>
<p></p>
<p></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/ha5eOqg6nDQ" title="YouTube video player" width="560"></iframe></p>
<p>迴圈方式</p>
<p><a href="https://drive.google.com/drive/u/0/folders/1_dPIEnjHaaXSAg-GkuxG3Fuyw_24BQBE">loap</a></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/_1bSgzhGrz8" title="YouTube video player" width="560"></iframe></p>
<p>重複執行取這兩個座標的方法</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">while sim.getSimulationState()~=sim.simulation_advancing_abouttostopre do</pre>
<p></p>
<h3>Python remote API 逆向運動學函式</h3>
<p><a href="https://drive.google.com/drive/u/0/folders/15vzdBvgM9nguREHoDuKRRCMRPgmup48h">api 檔案與程式</a></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/_1bSgzhGrz8" title="YouTube video player" width="560"></iframe></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import sim as vrep
import sys
import time
import math

vrep.simxFinish(-1)
clientID = vrep.simxStart('127.0.0.1', 19997, True, True, 5000, 5)

if clientID!= -1:
    print("Connected to remote server")
else:
    print('Connection not successful')
    
    vrep.simxStartSimulation(clientID, vrep.simx_opmode_oneshot)

def move(j1,j2,j4):
    ret,joint1=vrep.simxGetObjectHandle(clientID,"joint1",vrep.simx_opmode_blocking)
    ret,joint2=vrep.simxGetObjectHandle(clientID,"joint2",vrep.simx_opmode_blocking)
    ret,joint4=vrep.simxGetObjectHandle(clientID,"joint4",vrep.simx_opmode_blocking)
    jointHandle=[joint1,joint2,joint4]
    j=[j1*math.pi/180,j2*math.pi/180,j4*math.pi/180]
    for i in range(3):
        vrep.simxSetJointPosition(clientID,jointHandle[i],j[i],vrep.simx_opmode_oneshot)
        time.sleep(0.5)
def suck():
    vrep.simxSetIntegerSignal(clientID,"active",1,vrep.simx_opmode_oneshot_wait)
def quit():
    vrep.simxSetIntegerSignal(clientID,"active",0,vrep.simx_opmode_oneshot_wait)



while True:
    move(0,0,0)
    quit()
    move(0,0,-2)
    suck()
    
    move(40.9472,-68.978,0)
    quit()
   
    move(40.9472,-68.978,0)
    move(40.9472,-68.978,-2)
    suck()
    move(40.9472,-68.978,0)
    
    move(-158.2529,-89.6799,0)
    quit()
   
    move(-158.2529,-89.6799,0)
    move(-158.2529,-89.6799,-2)
    suck()
    move(-158.2529,-89.6799,0)</pre>
<p>心得:</p>
<p><span>這次作業對我來說非常的有挑戰性，由於我對程式還沒有很熟練，導致在製作時一直發生問題，詢問 <a href="https://40823131.github.io/cd2021">40823131</a>跟 <a href="https://a40823112.github.io/cd2021">40823112</a>,在他們指導下瞭解FOR迴圈的製作與API,讓我了解到哪裡需要加強</span></p>
<h1>stage3 專案</h1>
<h2>自動化(1)</h2>
<p>我們這組將期中所做的自動化,後端傳輸帶加上sensor 並改善機械手臂</p>
<p>我的任務:機械手臂程式與改善</p>
<p><a href="https://drive.google.com/drive/u/0/folders/1DZqlh-BzFIQtRg8cb2bToajrQIrOv5P2">場景檔</a></p>
<p></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/cnNvGcesOYc" title="YouTube video player" width="560"></iframe></p>
<h2>自動化(2)</h2>
<p>我將機械手臂改為我們w16周所做的MTB robot ,然後第三版我們想要在中間圓形傳輸帶也換成機械手臂</p>
<p>以節省空間</p>
<p><a href="https://drive.google.com/drive/u/0/folders/1DZqlh-BzFIQtRg8cb2bToajrQIrOv5P2">stage3(2)</a></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/oWi1VTushxk" title="YouTube video player" width="560"></iframe></p>
<h2>自動化(3)</h2>
<p>我們將中間又加上一台機械手臂讓四周可以空曠一點也比較流暢,較可惜的是車子旁的機械手臂無法用sensor來控制,所以後端改回原本的</p>
<p><a href="https://drive.google.com/drive/folders/1DZqlh-BzFIQtRg8cb2bToajrQIrOv5P2?usp=sharing">stage(3)最終版</a></p>
<p>stage3-程式操作與講解</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/7GSYIaMbCXg" title="YouTube video player" width="560"></iframe></p>
<h2>心得</h2>
<p>我非常感謝這組的組員尤其是<a href="https://40823131.github.io/cd2021">40823131</a>,經常詢問他們sensor程式的編寫或者不了解的地方,經過他的指導之下我也漸漸了解,之後也要持續加強補足其他地方</p>
<h1>W18</h1>